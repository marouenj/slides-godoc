Alternatives to TestNG @DataProvider
Marouen Jilani

* Agenda

- Logic to test
- TestNG @DataProvider
- JUnit test runner 'Parameterized'
- JUnit test runner 'DataProviderRunner'
- JUnit test runner 'Theories'

* Logic to test

We'll use this for comparing testing frameworks (except the last one)

    public class Util {
        public static int sum(Integer... vals) {
            int s = 0;
            for (Integer val : vals) {
                s += val;
            }
            return s;
        }
    }

* TestNG @DataProvider / Overview #1

    public class UtilTest {

        @DataProvider(name = "shouldSumUp")
        public Object[][] shouldSumUp() {
            return new Object[][] {
                    {
                            new Integer[] {0, 0},
                            0
                    },
                    {
                            new Integer[] {1, 1},
                            2
                    },
                    {
                            new Integer[] {1, 2, 3, 4},
                            10
                    },
            };
        }
    ...

* TestNG @DataProvider / Overview #2

    ...
        @Test(dataProvider = "shouldSumUp")
        public void shouldSumUp(Integer[] vals, Integer expected) {
            Assert.assertEquals(Util.sum(vals), (int) expected);
        }
    }

* TestNG @DataProvider / Evaluation

Pros
- possibility to define multiple data providers in the same class
- any test can reference any data provider
- can easily scale if every test sees its own data provider in isolation

Cons
- have to cope with JUnit and TestNG coexisting in the same project if the former is the status quo

* TestNG @DataProvider / Integration

Status quo
- Gradle project
- JUnit

To do

    dependencies {
        testCompile 'org.testng:testng:6.9.10'
    }

    task testNG (type: Test) {
        useTestNG {}
        reports.html.destination = file("$buildDir/reports/testsng")
    }

    test {
        dependsOn testNG
    }

* JUnit test runner 'Parameterized' / Overview #1

    @RunWith(value = Parameterized.class)
    public class UtilTest {

        private Integer[] vals;
        private Integer expected;

        public UtilTest(Integer[] vals, Integer expected) {
            this.vals = vals;
            this.expected = expected;
        }
    ...

* JUnit test runner 'Parameterized' / Overview #2

    ...
        @Parameters
        public static Iterable<Object[]> data() {
            return Arrays.asList(new Object[][]{
                    {
                            new Integer[]{0, 0},
                            0
                    },
                    {
                            new Integer[]{1, 1},
                            2
                    },
                    {
                            new Integer[]{1, 2, 3, 4},
                            10
                    },
            });
        }
    ...

* JUnit test runner 'Parameterized' / Overview #3

    ...
        @Test
        public void shouldSumUp() {
            Assert.assertEquals(Util.sum(vals), (int) expected);
        }
    }

* JUnit test runner 'Parameterized' / Cons

Unnecessary boilerplate:
- dependencies injected as class properties through a constructor
- unnecessary wrapper (iterator) around the data set. If the JUnit is iterating, why should the developer do the wrapping?

Most importantly:
- unable to specify multiple data containers in one class
- the unit of a scenario can't be a method. It can only be a class
- significant increase in the number of test classes

Even more important:
- only one test runner can be used at a time (within the scope of a class)
- impossible to run parameterized testing with, say, Spring Mock MVC @RunWith(SpringJUnit4ClassRunner.class)

* JUnit test runner 'Parameterized' / Integration

Status quo
- Gradle project
- JUnit

To do
- nothing
- parameterized test are supported out of the box with JUnit

* JUnit test runner 'DataProviderRunner' / Overview #1

    @RunWith(value = DataProviderRunner.class)
    public class UtilTest {

        @DataProvider
        public static Object[][] shouldSumUp() {
            return new Object[][]{
                    {
                            new Integer[]{0, 0},
                            0
                    },
                    {
                            new Integer[]{1, 1},
                            2
                    },
                    {
                            new Integer[]{1, 2, 3, 4},
                            10
                    },
            };
        }
    ...

* JUnit test runner 'DataProviderRunner' / Overview #2

    ...
        @Test
        @UseDataProvider("shouldSumUp")
        public void shouldSumUp(Integer[] vals, Integer expected) {
            Assert.assertEquals(Util.sum(vals), (int) expected);
        }
    }

* JUnit test runner 'DataProviderRunner' / Evaluation

Pros
- exactly similar to TestNG's @DataProvider

Cons
- unable to launch another test runner simultaneously (Spring Mock MVC with the @RunWith(SpringJUnit4ClassRunner.class))
- this means not be able to leverage Mock MVC framework with data-driven testing

* JUnit test runner 'DataProviderRunner' / Integration

Status quo
- Gradle project
- JUnit

To do

    testCompile group: 'com.tngtech.java', name: 'junit-dataprovider', version: '1.10.0'

- further investigation on the stability of the project and the commitment of the creators of the tool towards supporting its adopters

* JUnit test runner 'Theories' / Overview #1

A niche within JUnit
- tailored to assert mathematical expressions
- no possible way to specify expected values

* JUnit test runner 'Theories' / Overview #2

    @RunWith(Theories.class)
    public class UtilTest {

        @DataPoint
        public static int a = 10;

        @DataPoint
        public static int b = 20;

        @DataPoints
        public int[] moreDataPoints() {
            return new int[] {1, 2, 100};
        }
    ...

* JUnit test runner 'Theories' / Overview #3

    ...
        /**
         * Verify the correctness of the triangular inequality
         */
        @Theory
        public void triangleInequality(int a, int b) {
            Assert.assertTrue((a + b) > a);
            Assert.assertTrue((a + b) > b);
        }
    }

* JUnit test runner 'Theories' / Evaluation

Pros
- takes care of combining all the data provided

Cons
- not very usefull for unit testing (testing chunck of code/method/layer in isolation)
