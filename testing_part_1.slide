Ideas about testing
Marouen Jilani

* Agenda

- Test data management
- Test coverage
- Spring Mock MVC
- Minor ideas

* Test data management / Issues / scope #1

    public class DefaultTest {
        private ... ID = ...
        ...
    }

- Data is mixed with other utilities (mocking objects, logger, ...)

* Test data management / Issues / scope #2

    public class BaseTest {
        protected ... ID = ...

        protected ... getTestData() {
            ...
        }
    }

    public class DefaultTest extends BaseTest {
        ...
    }

- Inheretence is a bad candidate for data re-usage
- It doesn't offer a fine-grained grouping of data
- This will eventually lead to a big data container
- Hard to make sense out of and collaborate on

* Test data management / Issues / scope #3

    public class BaseTest {
        @Test
        public void do() {
            ... id = ...
            ...
        }
    }

- Data preparation is mixed with test logic

* Test data management / Issues / scope #4

- Leveraging the scopes (method, class, super class, external class) provided by Java for data re-usage doesn't scale
- As a developer, I need to rely on manual tracking to identify test data for a particular test

* Test data management / Issues / test function per test case #1

- AKA duplication of logic (data preparation logic and test logic)

    public class DefaultTest {
        @Test
        public void shouldDefaultToFalseWhen...() {
        }

        @Test
        public void shouldBeValid() {
        }

        @Test
        public void shouldThrowAnExceptionWhen...() {
        }
        ...
    }

* Test data management / Issues / test function per test case #2

Lots of efforts to:
- scroll down
- size up coverage for a particular situation (what test cases have been covered, what's missing, ...)
- avoid duplication of tests

* Test data management / Solution / data-driven testing

- Really decouples data from test logic
- Scalable (one container of data per test)
- One entry per test case
- Entry = input data + expected
- Multiple test cases, one logic for data prepration, one logic for testing

* Test data management / Solution / TestNG #1

- Inspired by JUnit but adds more
- Data-driven testing through @DataProvider annotation
- Data container is a method annotated with @DataProvider
- Test method sees test data through method arguments (injection = complete decoupling)

* Test data management / Solution / TestNG #2

    @DataProvider(name = "shouldSumUp")
    public Object[][] shouldSumUp() {
        // data definition
        // logic for grouping the data
    }

    @Test(dataProvider = "shouldSumUp")
    public void shouldSumUp(Integer[] vals, Integer expected) {
        // logic for retrieving the data
        // test logic
    }

* Test data management / Solution / TestNG #3

To integrate TestNG with JUnit in a Gradle project

    dependencies {
        testCompile 'org.testng:testng:6.9.10'
    }

    task testNG (type: Test) {
        useTestNG {}
        reports.html.destination = file("$buildDir/reports/testsng")
    }

    test {
        dependsOn testNG
    }

* Test coverage #1

A common rule of thumb
- don't test every line of code you write
- only test the 'logic' part
- Interceptor, Controller, Service, DAL, Util...

Interfaces are logic-less code
- Mapstruct-generated classes are not!
- Is mapping working as expected?
- What if someone changes the method signature or add/remove/edits @mapping annotations

* Test coverage #2

Data containers are logic-less code
- Annotations for validation are not! Data containers should be tested in this case
- Is validation working as expected?
- What if someone add/remove/edit an annotation?

Custom annotations should be tested
- They're very fundamental (dependencies but not dependent)

Less time to debug. Start right at the source
- Controller is entrypoint for requests, not for debugging!

* Test coverage #3

With full coverage
- leverage process of elimination

- Test cases for the whole lifecycle
- Take subset for each layer
- If test fails at layer n , respective tests will fail at layer n+1...
- The first failure encountered is the source

* Test coverage #4

    #             r
    #             e
    #         c   q
    #     s   o   u
    #     e   n   e
    # d   r   t   s
    # a   v   r   t
    # l   i   o
    ##### c   l   o
      x # e   l   b
      x ##### e   j
          x # r   e
          x ##### c
              o # t
              x ####
                  o
                  x

* Spring Mock MVC / Best practices #1

    public class XControllerTest extends AbstractTestNGSpringContextTests {
        @Autowired
        private XController xController;

        private MockMvc mockMvc;
    }

* Spring Mock MVC / Best practices #2

    public class XControllerTest extends AbstractTestNGSpringContextTests {
        @Autowired
        private XController xController;

        private MockMvc mockMvc;

        private static class BeanProvider {
        }
    }

* Spring Mock MVC / Best practices #3

    @ContextConfiguration(classes = { XControllerTest.BeanProvider.class })
    @ActiveProfiles("Xcontroller01")
    public class XControllerTest extends AbstractTestNGSpringContextTests {
        @Autowired
        private XController xController;

        private MockMvc mockMvc;

        @Configuration
        @Profile("Xcontroller01")
        private static class BeanProvider {
        }
    }

* Spring Mock MVC / Best practices #4

    @ContextConfiguration(classes = { XControllerTest.BeanProvider.class })
    @ActiveProfiles("Xcontroller01")
    public class XControllerTest extends AbstractTestNGSpringContextTests {
        @Autowired
        private XController xController;

        private MockMvc mockMvc;

        @Configuration
        @Profile("Xcontroller01")
        private static class BeanProvider {
            @Bean
            public XController xController() {
                return new XController();
            }
        }
    }

* Spring Mock MVC / Best practices #5

    @ContextConfiguration(classes = { XControllerTest.BeanProvider.class })
    @ActiveProfiles("Xcontroller01")
    public class XControllerTest extends AbstractTestNGSpringContextTests {
        @Autowired
        private XController xController;

        private MockMvc mockMvc;

        @Configuration
        @Profile("Xcontroller01")
        private static class BeanProvider {
            @Bean
            public ... get...() {
                return Mockito.mock(...);
            }
        }
    }

* Spring Mock MVC / Best practices #6

    @ContextConfiguration(classes = { XControllerTest.BeanProvider.class })
    @ActiveProfiles("Xcontroller01")
    public class XControllerTest extends AbstractTestNGSpringContextTests {
        @Autowired
        private XController xController;

        private MockMvc mockMvc;

        @Configuration
        @Profile("Xcontroller01")
        private static class BeanProvider {
            public final static ... BEAN = Mockito.mock(...);

            @Bean
            public ... get...() {
                return BEAN;
            }
        }
    }

* Spring Mock MVC / Best practices #7

    @ContextConfiguration(classes = { XControllerTest.BeanProvider.class })
    @ActiveProfiles("Xcontroller01")
    public class XControllerTest extends AbstractTestNGSpringContextTests {
        @Autowired
        private XController xController;

        private MockMvc mockMvc;

        @BeforeMethod
        public void init() {
            this.mockMvc = MockMvcBuilders.standaloneSetup(this.xController).build();
        }

        @Configuration
        @Profile("Xcontroller01")
        private static class BeanProvider {
            ...
        }
    }

* Minor ideas

- Mapping between classes in main and test packages
